<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/utils"
	xmlns:osgi="http://www.springframework.org/schema/osgi"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
		http://www.springframework.org/schema/osgi http://www.springframework.org/schema/osgi/spring-osgi-1.2.xsd">
	<context:component-scan base-package="org.lucius.xlucius.portal.user" />
	
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="interceptors">
			<list>
				<ref bean="localeChangeInterceptor" />
			</list>
		</property>
	</bean>

	<!-- springmvc国际化配置 -->
	<!-- 资源文件绑定器 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>resources/i18n/messages</value>
			</list>
		</property>
	</bean>

	<!--基于动态加载的国际化配置 如果只是基于浏览器语言的国际化 可以不用配置此拦截器，可以和其它国际化方式通用 这个配置呢,是不论请求级别的国际化,还是Cookie级别的国际化,再或者Session级别的国际化,都必需有配置这个拦截器,否则会不能使用. -->

	<bean id="localeChangeInterceptor"
		class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
	
	<!-- 基于session的国际化 -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />

	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10240000" />
		<property name="resolveLazily" value="true" />
		<property name="maxInMemorySize" value="10240000" />
	</bean>

	<!-- freemarker的配置 -->
	<bean id="freemarkerConfig"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/WEB-INF/template/" />
		<property name="defaultEncoding" value="utf-8" />
		<property name="freemarkerSettings">
			<props>
				<!-- 每次扫描模板文件是否更新的时间间隔，默认5秒 -->
				<prop key="template_update_delay">10</prop>
				<prop key="locale">zh_CN</prop>
				<prop key="datetime_format">yyyy-MM-dd</prop>
				<prop key="date_format">yyyy-MM-dd</prop>
				<!-- 数字格式化 -->
				<prop key="number_format">#.##</prop>
				<prop key="auto_import">include/spring.ftl as spring</prop>
			</props>
		</property>
	</bean>

	<!-- FreeMarker视图解析 如返回student。。在这里配置后缀名ftl和视图解析器。。 -->
	<bean
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<!-- ViewResolver加载顺序 ：第二个加载 -->
		<property name="order" value="2" />
		<property name="viewClass"
			value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
		<property name="suffix" value=".ftl" />
		<property name="cache" value="true" />
		<!-- 设置 request变量名为 rc-->
		<property name="requestContextAttribute" value="rc" />
		<property name="contentType" value="text/html;charset=utf-8" />
		<property name="exposeRequestAttributes" value="true" />
		<property name="exposeSessionAttributes" value="true" />
		<property name="exposeSpringMacroHelpers" value="true" />
	</bean>

	<!-- RESTful服务中很重要的一个特性即是同一资源,多种表述我们使用ContentNegotiatingViewResolver就可以做到， 
		这个视图解析器允许你用同样的内容数据来呈现不同的view -->
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<!-- ViewResolver加载顺序 ：第一个加载 -->
		<property name="order" value="1" />
		<!-- 匹配的url后缀名 例如ContentNegotiatingViewResolver会首先将 .xml 根据mediaTypes属性将其转换成 
			application/xml 然后完成下面的比较 ContentNegotiatingViewResolver是根据客户提交的MimeType(如 
			text/html,application/xml)来跟服务端的一组viewResover的MimeType相比较, 如果符合,即返回viewResover的数据 -->
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="html" value="text/html" />
			</map>
		</property>
		<!-- for application/json
			<property name="defaultViews">
				<list>
					<bean class="com.isoftstone.agiledev.web.springmvc.ligerui.LigerUIView" />
				</list>
			</property>
 		-->
		<!-- 这里是是否启用扩展名支持，默认就是true 例如 /user/{userid}.json -->
		<property name="favorPathExtension" value="true"></property>

		<!-- 这里是是否启用参数支持，默认就是true 例如 /user/{userid}?format=json -->
		<property name="favorParameter" value="false"></property>

		<!-- 这里是否忽略掉accept header，默认就是false 例如 GET /user HTTP/1.1 Accept:application/json -->
		<property name="ignoreAcceptHeader" value="true"></property>
	</bean>
	
	 <osgi:reference id="userService" interface="org.lucius.xlucius.spi.service.IUserService"/>
</beans>

